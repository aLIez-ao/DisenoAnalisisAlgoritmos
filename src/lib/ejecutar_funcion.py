"""
Este m√≥dulo contiene funciones utilitarias para ejecutar y mostrar resultados de diversos algoritmos cl√°sicos,
principalmente para prop√≥sitos educativos y de demostraci√≥n en consola. Proporciona funciones que llaman a
implementaciones de algoritmos importados y presentan sus resultados de forma formateada y colorida usando colorama.
Requiere:
- colorama para la salida colorida en consola.
- algoritmos.py con las implementaciones de los algoritmos llamados.
Uso:
Importar este m√≥dulo y llamar a las funciones de ejecuci√≥n pasando los argumentos requeridos.
"""

import random
from typing import List, Tuple
from colorama import Fore, Style
from algoritmos import *
from lib import *
from .lector_txt import leer_txt


# -------------------------------
# Funciones para ejecutar los algoritmos
# -------------------------------


def ejecutar_par_suma_k(arreglo):
    """
    Busca y ejecuta algoritmos para encontrar un par de n√∫meros en el arreglo
    que sumen un valor k (calculado aleatoriamente a partir de dos elementos).

    Compara dos versiones: la b√∫squeda est√°ndar y la optimizada.

    Args:
        arreglo (list): Lista de enteros donde se buscar√°n los pares.

    Returns:
        None. Imprime en consola los resultados de ambas b√∫squedas.

    Nota:
        - Selecciona aleatoriamente dos √≠ndices del arreglo
        - Calcula k como la suma de los elementos en esos √≠ndices
        - Ejecuta dos funciones de b√∫squeda para comparar resultados
    """
    i, j = random.sample(range(len(arreglo)), 2)
    k = arreglo[i] + arreglo[j]
    print(Style.BRIGHT + f"\n{'='*40}")
    print(Style.BRIGHT + f" Buscando si existe un par que sume {k} ")
    print(f"{'='*40}\n")
    existe_par_suma_k(arreglo, k)
    existe_par_suma_k_optimizado(arreglo, k)


def ejecutar_busqueda_lineal(arreglo, valor):
    """
    Ejecuta la b√∫squeda lineal de un valor en el arreglo e imprime
    el resultado con informaci√≥n sobre comparaciones realizadas.

    Args:
        arreglo (list): Lista de enteros donde se realizar√° la b√∫squeda.
        valor (int): El valor a buscar en el arreglo.

    Returns:
        None. Imprime en consola el √≠ndice encontrado o mensaje de no encontrado,
        junto con el n√∫mero de comparaciones realizadas.

    Output:
        - Mensaje de √©xito en verde si se encuentra el valor
        - Mensaje de error en rojo si no se encuentra
        - N√∫mero total de comparaciones realizadas
    """
    indice, comparaciones = busqueda_lineal(arreglo, valor)
    print(Style.BRIGHT + f"\nB√∫squeda lineal del valor {valor}:")
    if indice != -1: print(Fore.GREEN + f"‚úÖ Valor encontrado en √≠ndice {indice}")
    else: print(Fore.RED + "‚ùå Valor no encontrado.")
    print(f"N√∫mero de comparaciones realizadas: {comparaciones}\n")


def ejecutar_suma_recursiva(lista):
    """
    Calcula la suma de todos los elementos en una lista utilizando recursi√≥n
    e imprime el resultado de forma formateada.

    Args:
        lista (list): Lista de n√∫meros (int o float) a sumar recursivamente.

    Returns:
        None. Imprime en consola la lista y el resultado de la suma.

    Output:
        - Lista original
        - Resultado de la suma en color verde

    Ejemplo:
        ejecutar_suma_recursiva([1, 2, 3, 4, 5])
        # Output: Suma recursiva de la lista [1, 2, 3, 4, 5]:
        #         Resultado: 15
    """
    print(Style.BRIGHT + f"\nSuma recursiva de la lista {lista}:")
    print(Fore.GREEN + f"Resultado: {suma_recursiva(lista)}\n")


def ejecutar_contar_digitos(n):
    """
    Cuenta el n√∫mero de d√≠gitos en un n√∫mero entero utilizando recursi√≥n
    e imprime el resultado.

    Args:
        n (int): N√∫mero entero del cual contar los d√≠gitos.

    Returns:
        None. Imprime en consola el n√∫mero y la cantidad de d√≠gitos.

    Output:
        - N√∫mero analizado
        - Cantidad de d√≠gitos en color verde

    Ejemplo:
        ejecutar_contar_digitos(12345)
        # Output: Contar d√≠gitos del n√∫mero 12345:
        #         Resultado: 5
    """
    digitos = contar_digitos(n)
    print(Style.BRIGHT + f"\nContar d√≠gitos del n√∫mero {n}:")
    print(Fore.GREEN + f"Resultado: {digitos}\n")


def ejecutar_eliminar_medio(pila):
    """
    Elimina el elemento del medio de una pila e imprime el resultado
    antes y despu√©s de la operaci√≥n.

    Args:
        pila (list): Pila (lista) de la cual eliminar el elemento medio.

    Returns:
        None. Modifica la pila in-place y imprime el resultado.

    Output:
        - Pila original (copia para mostrar)
        - Pila despu√©s de eliminar el elemento del medio en color verde

    Nota:
        - Si la pila tiene longitud par, se elimina el elemento superior del medio
        - La funci√≥n modifica la lista original

    Ejemplo:
        ejecutar_eliminar_medio([1, 2, 3, 4, 5])
        # Output: Pila original: [1, 2, 3, 4, 5]
        #         Pila despu√©s de eliminar el medio: [1, 2, 4, 5]
    """
    pila_copia = pila.copy()
    print(Style.BRIGHT + f"\nEliminar el elemento medio de la pila {pila_copia}:")
    eliminar_medio(pila_copia)
    print(Fore.GREEN + f"Pila despu√©s de eliminar el medio: {pila_copia}\n")


def ejecutar_es_palindromo(cadena):
    """
    Verifica si una cadena de texto es un pal√≠ndromo e imprime el resultado
    de forma visual con indicadores de √©xito o fracaso.

    Args:
        cadena (str): Cadena de caracteres a verificar.

    Returns:
        None. Imprime en consola si la cadena es o no un pal√≠ndromo.

    Output:
        - Mensaje en verde (‚úÖ) si es pal√≠ndromo
        - Mensaje en rojo (‚ùå) si no es pal√≠ndromo

    Ejemplo:
        ejecutar_es_palindromo("anilina")
        # Output: Verificar si la cadena 'anilina' es un pal√≠ndromo:
        #         ‚úÖ Es un pal√≠ndromo.

        ejecutar_es_palindromo("hola")
        # Output: Verificar si la cadena 'hola' es un pal√≠ndromo:
        #         ‚ùå No es un pal√≠ndromo.
    """
    print(Style.BRIGHT + f"\nVerificar si la cadena '{cadena}' es un pal√≠ndromo:")
    if es_palindromo(cadena): print(Fore.GREEN + "‚úÖ Es un pal√≠ndromo.\n")
    else: print(Fore.RED + "‚ùå No es un pal√≠ndromo.\n")


def ejecutar_maximo_producto(arreglo):
    """
    Prueba la funci√≥n encontrar_maximo_producto con estilo colorido en consola.

    Args:
        arreglo: Lista de enteros a procesar
    """
    num1, num2, producto_maximo = encontrar_maximo_producto(arreglo)

    print(Style.BRIGHT + f"\n{'='*60}")
    print(f"B√∫squeda del m√°ximo producto de dos n√∫meros:")
    print(f"{'='*60}")
    print(f"Arreglo: {arreglo}")

    print(Style.BRIGHT + Fore.CYAN + f"\nüìä Resultado:")
    print(Fore.GREEN + f"‚úÖ Los dos n√∫meros con producto m√°ximo: {num1} √ó {num2}")
    print(Fore.YELLOW + f"üéØ Producto m√°ximo: {producto_maximo}\n")
    print(f"{'='*60}\n")


def ejecutar_cifrar_cesar(texto: str, desplazamiento: int, alfabeto: str):
    """
    Ejecuta el cifrado C√©sar y muestra el resultado en consola con estilo visual.

    Args:
        texto (str): Texto a cifrar.
        alfabeto (str): Cadena de caracteres permitidos en el cifrado.
        desplazamiento (int): N√∫mero de posiciones para el cifrado.

    Returns:
        None. Imprime en consola el resultado del cifrado.

    Output:
        - Mensaje en amarillo mostrando el texto original
        - Mensaje en cian mostrando el desplazamiento
        - Mensaje en verde mostrando el texto cifrado
    """
    print(Style.BRIGHT + f"\nCifrado C√©sar del texto:")
    print(Fore.YELLOW + f"üìú Texto original: '{texto}'")
    print(Fore.CYAN + f"üî¢ Desplazamiento: {desplazamiento}")

    texto_cifrado = cifrar_cesar(texto, alfabeto, desplazamiento)

    print(Fore.GREEN + f"üîê Texto cifrado: '{texto_cifrado}'\n" + Style.RESET_ALL)


def ejecutar_descifrar_cesar(texto_encriptado: str, alfabeto: str):
    """
    Ejecuta el descifrado C√©sar por fuerza bruta e imprime los resultados
    con colores, destacando los candidatos m√°s legibles.
    """
    print(Style.BRIGHT + f"\nDescifrado por fuerza bruta del texto:")
    print(Fore.YELLOW + f"üîê Texto cifrado: '{texto_encriptado}'")
    print(Style.RESET_ALL)

    resultados = descifrar_cesar_fuerza_bruta(texto_encriptado, alfabeto)
    print(Fore.CYAN + "Posibles descifrados:\n" + Style.RESET_ALL)

    for desplazamiento, texto in resultados:
        print(f"{Fore.WHITE}Desplazamiento {desplazamiento:2d}:{Fore.RESET} {texto}")

    print(Fore.MAGENTA + "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n" + Style.RESET_ALL)


def ejecutar_cifrar_decifrar_cesar(ruta: str, desplazamiento: int, alfabeto: str):
    """
    Ejecuta el cifrado C√©sar sobre el contenido de un archivo .txt y luego
    realiza un descifrado por fuerza bruta mostrando todos los posibles
    desplazamientos.
    La funci√≥n imprime en consola:
        - El texto original le√≠do del archivo.
        - El desplazamiento utilizado para el cifrado.
        - El texto cifrado.
        - Todos los posibles descifrados por fuerza bruta, resaltando
          los que podr√≠an ser legibles.
    Args:
        ruta (str): Ruta del archivo .txt a leer.
        desplazamiento (int): N√∫mero de posiciones que se desplazar√° cada car√°cter.
        alfabeto (str): Cadena que representa el alfabeto permitido. 
                        Ejemplo: "abcdefghijklmn√±opqrstuvwxyz ,."
    Raises:
        FileNotFoundError: Si el archivo no existe en la ruta especificada.
        UnicodeDecodeError: Si el archivo no se puede decodificar como texto.
    Salida en consola:
        - Texto original
        - Texto cifrado
        - Tabla de posibles descifrados por fuerza bruta
    """
    texto = leer_txt(ruta)
    
    print(Style.BRIGHT + f"\nCifrado C√©sar del texto:")
    print(Fore.YELLOW + f"üìú Texto original: '{texto}'")
    print(Fore.CYAN + f"üî¢ Desplazamiento: {desplazamiento}")

    texto_encriptado = cifrar_cesar(texto, alfabeto, desplazamiento)

    print(Fore.GREEN + f"üîê Texto cifrado: '{texto_encriptado}'\n" + Style.RESET_ALL)
    ejecutar_descifrar_cesar(texto_encriptado, alfabeto)